((("mysort" .
   [2 0 0 0 0 0])
  ("Prelude" .
   [0 0 0 0 0 1 0])
  ("import" .
   [0 0 0 0 0 1])
  ("mymax" .
   [1 0 0 0 0])
  ("mymax'" .
   [1 0 0 0 0 0])
  ("stringp" .
   [1 0 0 0 0 0 0])
  ("some-tests" .
   [0 0 0 0 0 0 1 0 0 0])
  ("make-vars-table" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("mapc" .
   [1 0 0 0])
  ("vars" .
   [2 0 0 0])
  ("bool" .
   [3 0 0 1])
  ("%eval-tree" .
   [0 0 0 0 0 0 1 0 0 0])
  ("monad" .
   [1 0 0 0 0])
  ("variables-table" .
   [0 0 0 0 5 1 0 0 1 0 0 0 0 0 0])
  ("EVAL-STR" .
   [0 0 0 0 0 0 0 1])
  ("eval-tree" .
   [3 0 0 0 0 1 1 0 0])
  ("EVAL-TREE" .
   [0 0 0 0 1 0 0 0 0])
  ("%to-expr" .
   [0 0 0 0 2 0 0 0])
  ("first-elem" .
   [0 0 0 0 0 0 2 0 0 0])
  ("node-v-commut-op" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("*" .
   [3])
  ("make-leaf-if-not-leaf" .
   [0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0])
  ("node-v-node" .
   [3 0 0 0 0 0 0 0 0 0 0])
  ("op-fnc" .
   [1 0 0 0 0 0])
  ("commutative-optimize-s" .
   [2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("op-v" .
   [7 0 0 0])
  ("%optimize-node" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("rest-args" .
   [0 0 0 0 3 1 0 0 0])
  ("remove-if-not" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("commutative-operation" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("commutative-optimize" .
   [0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 0 0 0 0])
  ("error" .
   [1 0 0 0 0])
  ("*node-v-operations*" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("is-const" .
   [0 0 0 0 2 0 0 0])
  ("is-const-node" .
   [0 0 0 0 0 2 0 0 0 0 0 0 0])
  ("remove-if" .
   [1 0 0 0 0 0 2 0 0])
  ("%grammar-list" .
   [0 0 0 0 0 1 1 0 0 0 0 0 0])
  ("term-function" .
   [0 0 1 0 2 0 0 0 0 0 0 0 0])
  ("operations" .
   [2 0 0 0 0 0 0 0 0 0])
  ("%create-node" .
   [0 0 0 0 0 2 0 0 0 0 0 0])
  ("add-child" .
   [0 0 0 0 1 0 0 0 0])
  ("child" .
   [1 0 0 0 0])
  ("is-not-leaf" .
   [0 0 0 0 1 0 1 1 0 0 0])
  ("post-order-trav" .
   [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0])
  ("create-tree-expr" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0])
  ("bind" .
   [2 0 0 0])
  ("t" .
   [3])
  ("new-wave" .
   [0 0 0 0 0 1 0 0])
  ("traversal-RL" .
   [3 0 0 0 0 0 0 0 0 0 0 0])
  ("see-value-fnc" .
   [0 0 0 5 0 0 0 0 0 0 0 0 0])
  ("trrr" .
   [1 0 0 0])
  ("traversal-LR" .
   [0 0 0 0 1 0 0 0 0 0 0 0])
  ("xx-acc" .
   [0 0 0 3 1 0])
  ("%count-shit" .
   [0 0 1 1 0 0 0 0 0 0 0])
  ("aand" .
   [3 0 0 0])
  ("%apply-duplicates" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("super-function-passive-argument" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("%ppp" .
   [3 0 0 0])
  ("super-function" .
   [1 0 1 1 12 1 0 0 0 0 0 0 0 0])
  ("op" .
   [11 0])
  ("math-function-character" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0])
  ("%operands-to-string" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("result-str" .
   [1 0 0 2 4 1 0 0 0 0])
  ("operation-string" .
   [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0])
  ("ops" .
   [2 0 0])
  ("%read-symbol" .
   [0 0 0 0 0 0 0 3 0 0 0 0])
  (":ltk" .
   [2 0 0 0])
  (":hello-world-ltk-system" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  (":expression-multipliers-list" .
   [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("math-fnc-linear-combination" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("math-fnc" .
   [0 0 0 0 1 0 0 0])
  ("op1-raw" .
   [1 0 0 0 2 1 0])
  ("rest-ops-allmost-ready" .
   [0 0 0 0 0 0 0 0 0 0 4 2 0 0 0 0 0 0 0 0 0 0])
  ("rest-ops-raw" .
   [5 0 0 0 0 0 0 0 0 5 0 0])
  ("%parrenticies-needed" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("%node-to-str" .
   [0 0 0 1 0 2 5 0 0 0 0 0])
  ("is-second-op" .
   [0 0 0 0 3 1 0 0 0 0 0 0])
  ("op-str" .
   [0 0 0 0 1 0])
  ("op2-str" .
   [0 0 0 0 1 0 0])
  ("op1-str" .
   [0 0 0 0 1 0 0])
  ("is-op2" .
   [0 0 0 4 1 0])
  ("node-v-commutative" .
   [0 0 0 0 0 0 0 0 2 0 1 1 0 0 0 0 0 0])
  (":commutative" .
   [0 0 0 0 3 1 0 0 0 0 0 0])
  (":symmetrical" .
   [0 0 0 2 0 0 0 0 0 0 0 0])
  ("sub" .
   [6 0 0])
  ("*nodes*" .
   [0 0 4 0 0 0 0])
  ("add-one-char-lexem" .
   [0 0 0 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("priority" .
   [0 0 0 3 2 0 0 0])
  ("*one-char-lexems-cl*" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("tst2" .
   [2 0 0 0])
  ("tst1" .
   [2 0 0 0])
  ("parser" .
   [10 0 0 2 0 0])
  ("CONS" .
   [0 0 0 1])
  ("concatenate?" .
   [0 0 0 0 0 0 0 0 0 0 0 1])
  ("eq" .
   [15 0])
  ("make-expr" .
   [0 0 0 0 0 0 0 1 0])
  ("old-lexem" .
   [0 0 0 1 1 0 0 0 0])
  ("div" .
   [6 0 0])
  ("add" .
   [7 0 0])
  ("rbraket" .
   [0 0 3 0 1 0 0])
  ("lbraket" .
   [0 0 0 0 3 0 0])
  ("%term-list" .
   [0 0 0 0 0 0 0 1 0 0])
  ("%term" .
   [9 0 0 0 0])
  ("%factor" .
   [3 0 0 1 3 0 0])
  ("%expr-list" .
   [0 0 0 0 0 0 2 0 0 0])
  ("term" .
   [2 0 0 0])
  ("expr" .
   [37 0 2 0])
  ("num" .
   [18 0 0])
  ("current-lexem" .
   [2 0 1 0 0 1 1 1 0 3 4 1 0])
  ("string-lexer" .
   [2 0 0 0 0 1 9 1 1 2 0 0])
  ("stream-lexer" .
   [0 0 0 0 0 0 0 1 0 0 0 0])
  ("lexer" .
   [2 0 0 0 0])
  ("whitespace-char-p" .
   [0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("last-lexem" .
   [0 0 0 2 0 0 0 0 0 0])
  ("%get-one-char-lexem" .
   [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("*one-char-lexems*" .
   [1 0 2 0 3 0 0 0 0 0 0 0 0 0 0 0 0])
  ("char-code" .
   [1 0 0 0 0 0 0 0 0])
  ("%read-number" .
   [0 0 0 0 0 2 1 0 0 0 0 0])
  ("read-char" .
   [0 0 0 0 0 1 0 0 0])
  ("digit-char-p" .
   [0 0 1 2 0 0 0 0 0 0 0 0])
  ("%next" .
   [9 0 0 6 0])
  ("incf" .
   [2 0 0 0])
  ("current-char" .
   [0 0 14 5 5 1 0 0 0 0 0 0])
  ("%getch" .
   [3 0 0 1 4 0])
  ("str-len" .
   [0 0 0 0 1 0 0])
  ("char-ptr" .
   [0 0 0 0 2 3 0 0])
  ("lexem" .
   [5 0 3 7 2])
  ("state.0" .
   [3 0 0 0 0 0 0])
  ("state.3" .
   [1 0 0 0 0 0 0])
  ("state.1" .
   [2 0 0 0 0 0 0])
  ("state.2" .
   [1 0 0 0 0 0 0])
  ("run-coffee-machine" .
   [0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("state-v" .
   [1 0 0 0 0 0 0])
  ("type-of" .
   [1 0 0 0 2 0 0])
  ("make-coffee-state" .
   [0 0 0 0 0 0 2 1 0 1 0 0 0 0 0 0 0])
  ("state-comments" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("milk-coffee-state" .
   [0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("common-coffee-state" .
   [0 0 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("broken-state" .
   [1 0 0 0 0 0 1 3 0 0 0 0])
  ("ready-state" .
   [0 0 1 1 9 0 0 0 0 0 0])
  ("defclass" .
   [5 0 1 2 1 0 0 0])
  ("PROCEED-STATE" .
   [0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("make-instance" .
   [0 0 0 0 2 3 0 0 0 0 0 0 0])
  ("message" .
   [1 0 1 1 4 2 0])
  ("select-state" .
   [0 0 1 0 1 0 0 0 0 0 0 0])
  ("state-list-len" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("state-list" .
   [2 0 0 0 0 3 1 3 0 0])
  ("read" .
   [3 0 0 0])
  ("defmethod" .
   [1 0 0 0 0 3 1 0 0])
  ("state-2" .
   [4 0 0 0 0 0 0])
  ("proceed" .
   [0 0 0 0 0 2 0])
  ("state-1" .
   [4 0 0 0 0 0 0])
  ("proceed-state" .
   [2 0 0 0 0 0 1 3 2 0 0 0 0])
  ("state" .
   [23 0 0 1 0])
  ("strb-str" .
   [0 0 0 0 0 0 1 0])
  ("stra-str" .
   [1 0 0 0 0 0 0 0])
  ("strb-original" .
   [0 0 0 0 0 2 1 0 0 0 0 0 0])
  ("%find-substr-routine" .
   [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  (":color" .
   [3 0 0 0 0 0])
  (":auto" .
   [1 0 0 0 0])
  ("test-my-select-function" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("file-equal" .
   [1 0 0 0 0 0 0 0 0 0])
  ("lines" .
   [1 0 0 0 0])
  ("file-to-string" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("let*" .
   [7 0 0 0])
  (":surname" .
   [1 0 0 0 1 1 0 0])
  (":age" .
   [4 0 0 0])
  (":direction" .
   [0 0 0 0 0 0 1 0 0 0])
  ("res-file" .
   [0 0 0 1 0 0 0 0])
  ("fstream" .
   [0 0 2 1 0 0 0])
  ("with-open-file" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("print-record" .
   [0 0 0 0 0 0 1 0 0 0 0 0])
  ("car-record-year" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("car-record-color" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("car-record-auto" .
   [2 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("human-record-age" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("human-record-surname" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("record-human" .
   [1 0 0 0 0 0 0 0 0 0 0 0])
  ("human-record-name" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("structure" .
   [0 0 0 0 1 1 1 0 0])
  (":year" .
   [3 0 0 0 0])
  (":name" .
   [4 0 0 0 0])
  ("ttest" .
   [1 0 0 0 0])
  ("parse-integer" .
   [0 0 0 0 0 0 1 4 1 0 0 0 0])
  ("final-table" .
   [0 0 0 0 1 1 0 0 0 0 0])
  ("file3" .
   [3 0 0 0 0])
  ("record-v" .
   [1 0 0 1 2 0 1 0])
  ("filter-options" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("record-filter" .
   [1 0 0 0 0 0 0 0 1 0 0 0 0])
  ("record" .
   [1 0 0 0 0 0])
  ("cars" .
   [1 0 0 0])
  ("people" .
   [0 0 1 0 0 0])
  ("make-select" .
   [1 0 0 0 0 0 0 1 0 0 0])
  ("rrt" .
   [1 0 0])
  ("file2" .
   [3 0 0 0 0])
  ("fourth" .
   [5 0 0 0 0 0])
  ("third" .
   [8 0 0 0 0])
  ("make-human-record" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("line" .
   [10 0 0 0])
  ("mapcar-csv-file" .
   [0 0 0 3 0 0 1 0 0 0 0 0 0 0 0])
  ("%parse-csv-line" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("file" .
   [4 0 0 0])
  ("file1" .
   [4 0 0 0 0])
  ("table1" .
   [2 0 0 0 0 0])
  ("record-car" .
   [4 0 0 0 0 0 0 0 0 0])
  ("age-c-p" .
   [1 0 0 0 0 0 0])
  ("rec" .
   [2 0 0])
  ("name-c-p" .
   [0 0 0 0 0 0 0 1])
  ("car-record" .
   [0 0 0 0 1 0 0 0 0 0])
  ("human-record" .
   [0 0 0 0 0 2 1 0 0 0 0 0])
  ("human" .
   [0 0 1 0 0])
  ("number" .
   [3 0 0 1 0 0])
  (":type" .
   [9 0 0 0 0])
  ("age" .
   [3 0 0])
  ("id4" .
   [0 0 2])
  ("defstruct" .
   [1 0 0 0 0 1 0 0 0])
  ("year" .
   [5 0 0 0])
  ("auto" .
   [4 0 1 0])
  ("surname" .
   [1 0 1 0 1 0 0])
  ("%push-value" .
   [0 0 1 1 0 0 0 0 0 0 0])
  ("string=" .
   [2 0 0 0 0 0 0])
  ("unless" .
   [1 0 0 0 0 0])
  ("val" .
   [10 0 0])
  ("parse-csv-line" .
   [0 0 1 4 1 0 0 0 0 0 0 0 0 0])
  ("value-buffer" .
   [0 0 6 1 1 0 0 0 0 0 0 0])
  ("text" .
   [5 0 0 0])
  ("run-merge-strings-tests" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("big-text-for-testing" .
   [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("stra-original" .
   [0 0 0 0 1 6 2 0 0 0 0 0 0])
  ("acc-lst" .
   [0 0 0 7 9 0 0])
  ("find-substr-lst" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("find-substr" .
   [0 0 6 2 2 0 0 0 0 0 0])
  ("find-substr-routine" .
   [0 0 0 0 0 0 2 0 0 0 0 0 2 0 0 0 0 0 0])
  ("strsss" .
   [1 0 0 0 0 0])
  ("max-val" .
   [5 0 1 1 2 0 0])
  ("values" .
   [2 0 0 3 0 0])
  ("stra" .
   [16 0 0 0])
  ("subst" .
   [1 0 0 1 1])
  ("maxstr" .
   [2 0 0 0 3 1])
  ("progn" .
   [5 0 1 0 0])
  ("maxval" .
   [1 0 1 5 2 0])
  ("&aux" .
   [17 0 0 0])
  ("strb" .
   [29 0 0 0])
  ("%num-to-str" .
   [0 0 1 0 0 0 0 0 0 0 0])
  ("write-to-string" .
   [0 0 1 0 0 2 1 0 0 0 0 0 0 0 0])
  ("archive" .
   [0 0 0 0 1 0 0])
  ("current-string" .
   [0 0 0 0 0 0 0 0 3 3 0 0 0 0])
  ("current" .
   [0 0 2 2 5 1 0])
  ("merge-strings-routine" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0])
  ("copy-list" .
   [0 0 0 0 2 0 1 0 0])
  ("bubble-sort-procedural-destructive" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("lst-length" .
   [0 0 0 0 2 1 0 0 0 0])
  ("dotimes" .
   [0 0 0 0 2 0 0])
  (":until" .
   [1 0 0 0 0 0])
  ("total-operations" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("current-thread-operations" .
   [0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("counter" .
   [1 0 19 2 2 0 0])
  ("elements-count" .
   [0 0 0 2 0 1 0 0 0 0 0 0 0 0])
  ("num-orders" .
   [0 0 4 3 0 0 0 0 0 2])
  ("make-less-list" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("cdar" .
   [1 0 0 0])
  ("tststr" .
   [0 0 1 1 0 0])
  ("maphash" .
   [0 0 0 1 1 0 0])
  ("char-count" .
   [0 0 0 0 0 0 3 0 0 0])
  ("length" .
   [5 0 2 2 1 0])
  ("coerce" .
   [9 0 0 4 1 0])
  ("merge-strings22" .
   [2 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("merge-strings2" .
   [2 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("nth" .
   [1 0 0])
  ("subseq" .
   [3 0 0 0 0 0])
  ("merge-strings" .
   [0 0 4 10 1 0 0 0 0 0 0 0 0])
  ("string" .
   [20 0 3 5 2 0])
  ("concatenate" .
   [2 0 0 0 2 2 2 2 0 0 0])
  ("string-equal" .
   [0 0 0 1 0 0 0 0 0 0 0 0])
  ("char=" .
   [3 0 1 0 0])
  ("ппп" .
   [1 0 0])
  ("args" .
   [7 0 0 0])
  ("&optional" .
   [2 0 0 6 2 2 0 0 0])
  ("foo" .
   [3 0 0])
  ("my-list" .
   [0 0 0 1 0 0 0])
  ("&rest" .
   [14 0 0 0 0])
  ("tst" .
   [4 0 0])
  ("op2" .
   [10 0 0])
  ("op1" .
   [32 0 2])
  ("%mrdcr" .
   [2 0 0 1 0 0])
  ("test-my-reduce" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("lst-s" .
   [1 0 0 0 0])
  ("test-my-member" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("expected" .
   [0 0 1 1 1 2 0 0])
  ("result" .
   [2 0 2 1 0 0])
  ("equalp" .
   [9 0 7 2 0 1])
  ("run-all-tests" .
   [1 0 0 2 1 1 1 1 0 0 0 0 0])
  ("fresh-line" .
   [0 0 0 2 0 0 0 0 0 0])
  ("xx" .
   [45 0])
  ("exit" .
   [1 0 0 0])
  ("%reduce-lambda" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("count" .
   [5 0 0 0 0])
  ("count-elements" .
   [0 0 0 0 3 1 1 0 0 0 0 0 0 0])
  ("if" .
   [37 0])
  ("acc-setp" .
   [0 0 0 0 0 0 0 1])
  (":from-end" .
   [0 0 0 0 2 3 0 0 0])
  ("identity" .
   [1 0 0 2 3 2 0 0])
  ("null" .
   [49 0 0 0])
  ("cond" .
   [32 0 0 0])
  ("initial-value-setp" .
   [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("%my-reduce-routine" .
   [0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0])
  ("labels" .
   [11 0 1 1 1 0])
  ("some" .
   [5 0 0 0])
  ("%my-member" .
   [4 0 0 1 2 0 0 0 0 0])
  ("funcall" .
   [57 0 0 0 0 1 0])
  ("nconc" .
   [13 0 0 1 1])
  ("list" .
   [76 0 0 0])
  ("push" .
   [14 0 0 0])
  ("listp" .
   [16 0 0 0 0])
  ("cons" .
   [98 0 2 1])
  ("append" .
   [9 0 0 1 0 1])
  ("my-flattern" .
   [2 0 1 2 0 1 0 0 0 0 0])
  ("functions" .
   [6 0 0 0 0 0 0 0 0])
  ("compose" .
   [4 0 0 4 0 0 0])
  ("cdr" .
   [77 0 0])
  ("funccall" .
   [4 0 0 0 0 0 0 0])
  ("function" .
   [1 0 0 1 4 0 1 0])
  ("idx" .
   [1 0 0])
  (":for" .
   [1 0 0 0])
  ("last" .
   [2 0 0 0])
  ("test-list" .
   [0 0 2 7 4 0 0 0 0])
  ("reduce" .
   [14 0 4 2 0 0])
  ("mul" .
   [11 0 0])
  ("sum" .
   [2 0 0])
  ("Multiple-values" .
   [0 0 0 2 0 0 0 0 0 0 0 0 0 0 0])
  ("sum-and-mul" .
   [0 0 0 0 0 2 0 0 0 0 0])
  ("lst" .
   [183 0 1])
  ("test" .
   [12 0 0 0])
  ("arg" .
   [3 0 0])
  ("let" .
   [46 0 0])
  ("aaa" .
   [2 0 0])
  ("acc" .
   [222 0 0])
  ("numberp" .
   [9 0 3 12 4 4 1])
  ("mapcar" .
   [27 0 2 1 0 0])
  ("inc-list" .
   [0 0 0 1 0 0 0 0])
  ("sum-list" .
   [2 0 0 1 1 0 0 0])
  ("apply" .
   [21 0 0 5 0])
  ("setf" .
   [29 0 0 0])
  ("first-is-bigger-than-zero" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("symbol-function" .
   [0 0 4 6 0 0 1 0 2 0 0 0 0 0 0])
  ("set" .
   [12 0 0])
  ("remove" .
   [11 0 0 0 0 0])
  ("pprint" .
   [89 1 1 8 3 0])
  ("color" .
   [5 0 0 0 0])
  ("regs" .
   [1 0 0 0])
  ("regs16_t" .
   [1 0 0 0 0 0 0 0])
  ("defun" .
   [107 0 1 6 1])
  ("while" .
   [1 0 0 0 0])
  ("graph" .
   [1 0 0 0 0])
  ("sin" .
   [3 0 0])
  ("factorial" .
   [0 0 3 3 2 0 0 0 0])
  ("elem" .
   [106 0 1 0])
  ("some-list" .
   [1 0 4 1 3 0 0 0 0])
  ("tester1" .
   [0 0 1 2 0 0 0])
  ("lambda" .
   [16 0 32 19 8 1])
  ("when" .
   [20 0 0 0])
  ("car" .
   [104 0 0])
  ("print" .
   [7 0 0 0 0])
  ("member" .
   [13 0 0 1 0 0])
  (":test" .
   [14 0 0 0 0])
  (":key" .
   [13 0 0 0])
  ("first" .
   [30 0 1 1 1])
  ("calc-line-fn" .
   [0 0 0 1 0 0 0 0 0 0 0 0])
  (":initial-value" .
   [0 0 2 1 3 1 1 1 0 0 0 0 0 0])
  ("reverse" .
   [6 0 1 1 0 0 0])
  ("%my-flatter-routine" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("a" .
   [1])
  ("*accumulator*" .
   [0 0 1 1 1 0 0 0 0 0 0 0 0])
  ("defparameter" .
   [0 0 0 1 0 2 0 0 0 1 0 0])
  ("clause" .
   [1 0 0 0 0 0])
  ("func1" .
   [1 0 0 0 0])
  ("func2" .
   [1 0 0 0 0])
  ("make-mapcar-if" .
   [0 0 0 0 1 0 0 0 0 0 0 1 0 0])
  ("initial-value" .
   [0 0 0 3 2 1 0 0 0 0 0 0 0])
  ("*accumulator-for-my-reduce*" .
   [0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("my-reduce" .
   [1 0 0 2 3 2 1 0 0])
  ("key" .
   [23 0 0])
  ("my-member" .
   [1 0 0 0 1 2 0 0 0])
  ("func" .
   [8 0 0 0])
  ("&key" .
   [3 0 0 0])
  ("from-end" .
   [1 0 1 4 4 1 0 0])
  ("my-reduce-routine" .
   [0 0 0 0 0 0 0 0 0 0 1 3 0 0 0 0 0])
  ("nil" .
   [170 0 0])
  ("data" .
   [8 0 0 0])
  ("data-ready" .
   [0 0 0 0 0 0 0 1 0 2])
  ("lista" .
   [1 0 0 0 0])
  ("lisb" .
   [1 0 0 0])
  ("tmp" .
   [3 0 2])
  ("selection-sort" .
   [0 0 0 0 3 1 0 0 0 0 0 0 0 0])
  ("swap" .
   [3 0 0 0])
  ("smallest" .
   [1 0 0 0 0 1 0 0])
  ("listb" .
   [0 0 0 0 1])
  ("min-elem" .
   [0 0 1 1 0 0 0 0])
  ("insert-elem" .
   [0 0 0 1 0 0 0 0 0 0 0])
  ("insertion-sort" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("insert" .
   [1 0 0 0 0 0])
  ("item" .
   [2 0 0 0])
  ("test-compose" .
   [0 0 0 0 0 0 1 0 0 0 0 0])
  ("compose1" .
   [1 0 0 0 0 0 0 0])
  ("compose3" .
   [1 0 0 0 0 0 0 0])
  ("compose2" .
   [2 0 0 0 0 0 0 0])
  ("run-compose-tests" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("test-make-mapcar-if" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("func-ready" .
   [1 0 0 0 0 0 0 0 0 0])
  ("fnc" .
   [23 0 0])
  ("input" .
   [11 0 3 2 1])
  ("test-function" .
   [0 0 2 1 0 0 3 0 0 0 0 0 0])
  ("name" .
   [8 0 0 0])
  ("original-fnc" .
   [0 0 1 1 0 1 0 0 0 0 0 0])
  ("test-redefined-function" .
   [0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("format" .
   [16 0 1 4 2 0])
  ("stream" .
   [9 0 2 2 0 0])
  ("*my-best-menu*" .
   [0 0 1 1 0 0 0 0 0 0 0 0 0 0])
  ("gethash" .
   [0 0 0 10 6 1 0])
  ("equal" .
   [1 0 0 0 0])
  ("make-hash-table" .
   [0 0 0 1 1 0 0 2 0 1 0 0 0 0 0])
  ("eql" .
   [1 0 0])
  ("str" .
   [46 0 0])
  ("table" .
   [6 0 1 0 0])
  ("strs" .
   [1 0 0 0])
  ("string-to-hash-table" .
   [0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0])
  ("value" .
   [18 0 0 0 0])
  ("hash-table-to-string" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("s" .
   [7])
  ("bubble" .
   [0 0 2 3 2 0])
  ("%bubble-cycle" .
   [0 0 4 1 2 0 0 0 0 0 0 0 0])
  ("second" .
   [8 0 7 5 3 0])
  ("bubble-sort" .
   [0 0 0 2 0 0 0 0 5 1 0])
  ("bubble-sort-acc" .
   [3 0 0 0 0 0 0 0 0 0 0 0 1 2 0])
  ("cddr" .
   [2 0 0 0])
  ("rest" .
   [9 0 0 0])
  ("last-elem" .
   [0 0 1 1 0 0 0 0 0])
  ("rest-list" .
   [0 0 0 0 0 1 1 0 0])
  ("run-sorting-test" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("my-q-sort" .
   [0 0 1 0 0 0 0 0 0])
  ("input-list" .
   [0 0 0 0 0 0 1 0 0 0])
  ("NUM-ORDERS" .
   [0 0 1 0 0 0 0 0 0 0])
  ("run-num-orders-test" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("nconc-in-list" .
   [0 0 0 0 0 0 2 0 0 0 0 0 0])
  ("merge-strings-3" .
   [3 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("lst-ret" .
   [4 0 0 0 1 0 0])
  ("accum" .
   [1 0 0 0 0])
  ("merge-strings3" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("merge-strings33" .
   [3 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("lambda-list" .
   [0 0 1 1 0 0 0 0 0 0 0])
  ("character" .
   [3 0 0 1 2 9 3 1 0])
  ("archive-routine" .
   [0 0 4 1 0 0 0 0 1 0 0 0 0 0 0])
  ("char" .
   [2 0 1 0])
  ("ret" .
   [5 0 0])
  ("ptr" .
   [8 0 0])
  ("c" .
   [3])
  ("tmp-dst" .
   [0 0 0 0 2 0 0])
  ("bubble-sort-procedural" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("NUM-ORDERS-SIMPLE" .
   [0 0 0 0 0 0 0 0 0 0 0 2 1 0 0 0 0])
  ("num-orders-complicated" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("num-orders-simple" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("run-factorial-test" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("%merge-lists" .
   [0 0 0 0 1 0 0 0 0 0 0 1])
  ("run-merge-strings-test" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("merge-strings-lst" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("merge-strings-str" .
   [2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("run-tests" .
   [0 0 1 2 0 1 0 0 0])
  ("expression" .
   [0 0 9 4 0 0 0 0 0 0])
  ("node" .
   [25 0 0 0])
  ("create-tree" .
   [0 0 6 7 3 1 1 0 1 0 0])
  ("tree" .
   [144 0 3 2])
  ("tree-to-expression" .
   [0 0 0 0 1 4 0 1 0 0 0 0 0 0 0 0 0 0])
  ("make-node" .
   [3 0 0 0 1 3 0 0 0])
  (":is-leaf" .
   [0 0 0 0 1 0 0 0])
  ("operation" .
   [6 0 11 29 1 6 0 0 0])
  ("childs" .
   [4 0 2 0 0 0])
  ("is-leaf" .
   [2 0 3 20 1 1 1])
  ("make-tree-node" .
   [0 0 0 0 1 7 1 1 0 0 1 0 0 0])
  ("make-leaf-node" .
   [1 0 0 0 0 3 1 4 1 0 0 0 0 0])
  ("node-value" .
   [3 0 0 3 10 26 12 6 1 0])
  ("node-childs" .
   [2 0 0 0 1 2 3 17 1 1 0])
  ("depth-first-pre-order-traversal" .
   [0 0 1 8 1 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("my-tree" .
   [0 0 8 0 1 0 0])
  ("princ" .
   [5 0 0 0 0])
  ("print-utility" .
   [0 0 4 0 0 0 0 0 0 0 0 0 0])
  ("dolist" .
   [2 0 0 0 0 0])
  ("run-1-2-tests" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("%breadth-first-traversal-routine" .
   [0 0 1 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("wave-lst" .
   [0 0 5 2 0 0 0 0])
  ("breadth-first-traversal" .
   [0 0 2 4 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("travers-fnc" .
   [0 0 0 5 0 0 1 0 0 0 0])
  ("tmp-lst" .
   [0 0 3 1 0 0 0])
  ("mod-fnc" .
   [0 0 1 0 0 0 0])
  ("mapTree" .
   [1 0 0 2 4 0 0])
  ("copy-tree" .
   [0 0 0 4 0 1 0 0 0])
  ("retval" .
   [7 0 0 2 0 0])
  ("data-stack" .
   [0 0 3 1 2 0 0 0 0 0])
  ("argumenst-count" .
   [0 0 2 1 0 0 0 0 0 0 0 0 0 0 0])
  ("%pop-list" .
   [0 0 0 1 1 0 0 0 0])
  ("evaluate-tree" .
   [0 0 3 6 1 0 0 0 0 0 0 0 0])
  ("pop" .
   [1 0 0])
  ("MY-TREE" .
   [0 0 0 1 0 0 0])
  ("print-tree" .
   [2 0 0 0 0 11 4 0 0 0])
  ("add-nodes" .
   [0 0 0 1 0 0 0 0 0])
  ("new-nodes" .
   [0 0 0 2 0 0 0 0 0])
  ("evaluate-tree-simple" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0])
  ("params" .
   [1 0 0 1 1 0])
  ("eval-fnc" .
   [0 0 0 0 0 3 1 0])
  ("evaluate-tree-complicated" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("traversal-test" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("run-traversal-tests" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("ffnc" .
   [1 0 0 0])
  ("mapTree-test" .
   [1 0 0 0 1 0 0 0 0 1 1 1])
  ("mapTree-old" .
   [0 0 0 0 0 0 0 0 1 0 0])
  ("run-traversal-and-mapTree-tests" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("run-make-select-tests" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("parsed" .
   [0 0 0 0 2 0])
  ("parsed-line" .
   [0 0 0 0 0 0 0 2 0 0 0])
  ("list-rest" .
   [1 0 0 0 0 0 2 1 0])
  ("accumulator" .
   [0 0 0 0 5 3 1 0 0 0 0])
  ("stra-buf" .
   [2 0 0 0 0 0 2 0])
  ("strb-buf" .
   [1 0 0 0 0 0 0 0])
  ("fnc-retval" .
   [0 0 0 1 0 0 0 1 0 0])
  ("childs-proceeded" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("apply-fnc-to-node" .
   [0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0])
  ("%apply-elements-list" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("copy-my-tree" .
   [0 0 0 2 1 2 0 0 0 0 0 0])
  ("tree-copy" .
   [0 0 0 0 0 1 3 1 0])
  ("*maptree-tests-counter*" .
   [0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("expected-order" .
   [0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("expected-order-test-result" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("ps" .
   [1 0])
  ("state-comment" .
   [1 0 0 0 0 0 0 1 0 0 0 0 0])
  ("state-names-list" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("current-state" .
   [1 0 0 0 0 0 0 0 2 0 0 0 0])
  ("inst-list" .
   [0 0 0 0 1 1 0 0 0])
  ("next-state" .
   [0 0 0 6 0 1 0 0 0 0])
  ("states-names-list" .
   [0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0])
  ("next-state-nl" .
   [2 0 0 0 0 0 0 0 0 0 0 3 0])
  ("dirty-state" .
   [0 0 3 1 0 0 0 0 0 0 0])
  ("states" .
   [2 0 0 0 0 0])
  ("states-names" .
   [0 0 0 0 0 0 0 0 0 1 0 0])
  ("run-" .
   [0 0 0 1])
  ("steal-money-state" .
   [0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0])
  ("enter-pin" .
   [0 0 0 0 0 1 2 3 0])
  ("put-card-state" .
   [0 0 0 3 1 0 0 0 0 0 0 0 0 0])
  ("Enter" .
   [0 0 3 0 0])
  ("Proceed" .
   [0 0 0 1 0 0 0])
  ("enter-pin-state" .
   [1 0 0 0 0 0 0 0 0 0 4 1 0 0 0])
  ("menu-state" .
   [0 0 0 4 1 0 0 0 0 0])
  ("get-money-state" .
   [0 0 0 0 2 0 0 0 0 0 0 0 0 0 0])
  ("check-balance-state" .
   [0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("broke" .
   [0 0 1 0 0])
  ("RUN-ATM-MACHINE" .
   [0 0 0 1 0 1 0 0 0 0 0 0 0 0 0])
  ("atm-machine" .
   [0 0 0 1 0 0 0 0 0 0 0])
  ("coffee" .
   [1 0 0 0 0 0])
  ("COMMON-LISP-USER::RUN-ATM-MACHINE" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("run-coffee-state-machine" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("*state-machine-input*" .
   [0 0 0 1 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("*state-machine-output*" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 2 1 0 0 0])
  ("with-input-from-string" .
   [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("output-stream" .
   [0 0 1 1 0 0 0 0 0 0 0 0 0])
  ("expected-file" .
   [0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("read-line" .
   [0 0 0 0 0 1 0 0 0])
  ("fnc-output" .
   [0 0 0 0 1 0 0 0 0 0])
  ("output-expected" .
   [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("old-input" .
   [0 0 0 1 1 0 0 0 0])
  ("old-output" .
   [0 0 0 0 0 2 0 0 0 0])
  ("test-state-machine" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  (":node" .
   [4 0 0 0 0])
  ("node-v" .
   [1 0 0 0 0 0])
  ("node-v-string" .
   [0 0 0 0 0 0 4 2 2 0 0 0 0])
  ("prev-operation" .
   [0 0 0 10 2 3 0 0 1 0 0 0 0 0])
  ("add-parrenticies" .
   [0 0 0 2 1 3 0 0 0 0 0 0 0 0 0 0])
  ("and" .
   [15 0 0])
  ("node-v-priority" .
   [0 0 0 0 0 0 0 0 2 3 0 0 0 0 0])
  ("inner-op" .
   [0 0 0 5 1 2 0 0])
  ("parrenticies-needed" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("not" .
   [12 0 0])
  ("complex-test" .
   [0 0 0 0 0 0 1 0 1 1 0 0])
  ("complex-fnc" .
   [0 0 0 2 1 0 0 0 0 0 0])
  ("lexer-test" .
   [0 0 1 0 0 0 0 0 0 0])
  ("parser-test" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("derivative" .
   [0 0 0 1 7 0 2 0 0 0])
  ("var" .
   [6 0 0])
  ("expresion" .
   [0 0 0 0 0 0 1 0 0])
  (":count" .
   [2 0 0 0 0 0])
  ("derivative-by" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("optimize" .
   [1 0 0 0 0 0 2 0])
  ("optimize-expr" .
   [0 0 0 5 24 4 1 0 0 1 1 1 0])
  ("%optimize" .
   [0 0 0 3 1 1 0 0 0])
  ("number-acc" .
   [2 0 0 0 0 0 0 2 0 0])
  ("arguments" .
   [1 0 2 19 0 0 0 0 0])
  ("optimized-args" .
   [0 0 0 0 0 0 0 0 0 5 13 1 1 0])
  ("passive-element" .
   [0 0 0 2 14 3 0 0 0 0 0 0 0 0 0])
  ("fnc-symbol" .
   [0 0 0 3 9 8 0 0 0 0])
  ("common-optimize" .
   [0 0 0 0 8 1 1 0 0 0 0 0 0 0 0])
  ("common-commutative-optimize" .
   [0 0 0 0 0 1 0 0 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("optimized-rest" .
   [2 0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("commutative-fnc" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("rest-ops" .
   [1 0 1 7 16 10 0 0])
  ("every" .
   [3 0 0 2 0])
  ("eval" .
   [2 0 0 0])
  ("common-anticommutative-optimize" .
   [0 0 0 0 0 0 0 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("x" .
   [2])
  ("symbol" .
   [0 0 0 1 0 1])
  ("commutative-fnc-symbol" .
   [0 0 0 0 0 5 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("optimized-v" .
   [13 0 0 0 0 0 0 0 0 1 0])
  ("contains-number" .
   [0 0 0 0 0 0 1 0 1 0 0 0 0 0 0])
  ("sequences" .
   [0 0 0 2 0 0 0 0 0])
  ("some-not-any" .
   [0 0 0 0 0 0 1 0 0 0 0 0])
  ("some-not-every" .
   [0 0 0 0 0 0 0 0 0 0 1 1 0 0])
  ("const-folding-needed" .
   [0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("some-expr" .
   [0 0 0 0 4 2 0 0 0])
  ("mfunction" .
   [0 0 1 0 0 0 0 0 0])
  ("commutative" .
   [2 0 0 0 4 0 1 0 1 0 0])
  (":string" .
   [0 0 0 0 0 0 1])
  (":priority" .
   [0 0 0 0 0 1 0 0 0])
  ("math-function" .
   [0 0 0 0 2 5 2 0 0 0 0 0 0])
  ("*math-functions*" .
   [0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0])
  ("string-v" .
   [2 0 0 0 0 0 0 0])
  ("math-function-derivative" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("elems" .
   [2 0 0 0 0])
  ("ncons" .
   [1 0 0 0 0])
  ("ss" .
   [1 0])
  ("exprs" .
   [3 0 0 0 0])
  ("my-let*" .
   [1 0 0 0 0 0 0])
  ("test-some" .
   [3 0 0 0 0 1 0 1 0])
  ("or" .
   [1 0])
  ("my-or" .
   [1 0 0 2 0])
  ("fnc-let*" .
   [0 0 0 0 1 0 0 0])
  ("depth-first-post-order-traversal" .
   [0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("evaluate-tree-2" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("proceeded" .
   [0 0 0 0 0 0 1 0 0])
  ("new-node" .
   [1 0 0 0 1 0 0 0])
  ("node-l" .
   [1 0 0 0 0 0])
  ("left" .
   [2 0 0 0])
  ("right" .
   [1 0 0 2 0])
  (":value" .
   [2 0 0 1 0 0])
  ("tree-insert" .
   [0 0 0 0 0 0 2 0 0 0 0])
  ("node-right" .
   [2 0 0 0 0 0 2 4 0 0])
  ("new-leaf" .
   [1 0 0 0 1 0 0 0])
  ("elements" .
   [1 0 0 0 0 0 0 0])
  ("CREATE-BINARY-TREE" .
   [0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("depth" .
   [2 0 0 0 0])
  ("struct" .
   [1 0 0 0 0 0])
  (":left" .
   [2 0 0 1 0])
  ("%traverse" .
   [0 0 0 0 1 0 0 0 0])
  ("node-left" .
   [3 0 0 0 0 0 0 4 0])
  (":right" .
   [1 0 0 0 0 0])
  ("tree-new" .
   [3 0 0 0 0 0 0 0])
  ("tree-old" .
   [1 0 0 0 0 0 0 0])
  ("tree-copy-lst" .
   [0 0 0 0 0 0 0 0 0 0 1 1 0])
  ("leaf" .
   [4 0 0 0])
  ("%try-to-paste-variable" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("defvar" .
   [1 0 0 0 0 0])
  ("*TEST-TABLE*" .
   [0 0 0 1 0 1 0 0 0 0 0 0])
  ("it" .
   [2 0])
  ("%teq" .
   [1 0 0 1])
  ("eval-str-str" .
   [0 0 0 1 2 0 0 0 0 1 0 0])
  ("trees-equal" .
   [1 0 0 0 0 0 2 0 0 0 0])
  ("declare" .
   [1 0 0 0 0 0 0])
  ("ignore" .
   [1 0 0 0 0 0])
  ("stop-predicate" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("some-rest" .
   [0 0 0 0 0 1 0 0 0])
  ("rrr" .
   [3 0 0])
  ("%is-const" .
   [0 0 0 0 1 0 0 0 0])
  ("list-a" .
   [6 0 0 0 0 0])
  ("list-b" .
   [8 0 0 0 0 0])
  ("%test-childs-equality" .
   [0 0 0 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("is-template" .
   [1 0 0 0 2 2 0 0 0 0 0])
  ("str2tree" .
   [0 0 0 0 3 0 0 0])
  ("read-from-string" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("multiple-value-bind" .
   [0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("%parse-template" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("template-var" .
   [0 0 0 2 4 0 0 0 0 0 0 0])
  ("hashtable" .
   [1 0 0 0 8 0 0 0 0])
  ("other-node" .
   [0 0 0 0 1 1 0 0 0 0])
  ("%test-template" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("trees-match" .
   [0 0 0 0 0 1 0 1 0 0 0])
  ("maplist" .
   [1 0 0 0 0 0 0])
  ("otherwise" .
   [0 0 0 0 0 0 1 0 0])
  ("fac" .
   [1 0 0])
  ("fib" .
   [1 0 0])))
